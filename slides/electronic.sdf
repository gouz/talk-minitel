## Electronique .[electronic]

## DIN .[electronic]

!image(assets/electronic/din.jpeg,din, 900)

## Fonctionnement .[electronic]

Serial Port

RX, TX, GND

## Carte √©lectronique .[electronic]

NodeMCU ESP8266

!image(assets/electronic/NodeMCU_DEVKIT_1.0.jpg,,700)

## Branchement .[electronic]

<table>
<tr>
<td>
!image(assets/electronic/image10.png,,, 500)
</td>
<td>
!image(assets/electronic/image11.png,,, 500)
</td>
</tr>
</table>

/*
Mettre une r√©sistance entre la broche TX de l‚ÄôESP8266 et RX du Minitel permet de filtrer le signal pour obtenir une meilleure transmission. M√™me principe c√¥t√© RX de l‚ÄôESP8266 avec une r√©sistance ‚ÄúPullup‚Äù pour nettoyer les ondes √©lectromagn√©tiques qui sont g√©n√©r√©es par le Minitel.
*/

## Biblioth√®ques .[electronic]

https://github.com/eserandour/Minitel1B_Soft

üôè √âric S√©randour

ESPAsyncWebSrv et ESPAsyncTCP

## Arduino - Headers .[electronic]

```arduino
#include "Minitel1B_Soft.h"
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebSrv.h>
Minitel minitel(3, 1); // RX, TX
const char *ssid = "3615Twitch";
const char *password = "gouz.dev";
AsyncWebServer server(80);
```

## Arduino - Setup 1 .[electronic]

```arduino
void setup() 
{
  minitel.changeSpeed(4800);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    minitel.newScreen();
    minitel.println("Connecting to WiFi...");
    delay(1000);
  }
  minitel.newScreen();
  minitel.println(WiFi.localIP().toString());
```

++MINITEL_IP++

## Arduino - Setup 2 .[electronic]

```arduino
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) { 
    request->send(200, "text/html", "<!doctype html><html lang=en>...</html>"); 
  });
  server.on("/new", HTTP_GET, [](AsyncWebServerRequest *request) {
    minitel.newScreen();
    request->send(200); 
  });
  server.on("/end", HTTP_GET, [](AsyncWebServerRequest *request) {
    minitel.noCursor();
    request->send(200); 
  });
  server.on("/post", HTTP_POST, [](AsyncWebServerRequest *request) {}, 
            handleUpload);
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", 
                                       "*");
  server.begin();
  minitel.println("Ready!");
}
```

## Arduino - loop & handleUpload .[electronic]

```arduino
void loop() {}
void handleUpload(AsyncWebServerRequest *request, 
                  String filename, size_t index, 
                  uint8_t *data, size_t len, 
                  bool final) {
  for (size_t i = 0; i < len; i++) 
    minitel.writeByte(data[i]);
  request->send(200);
}
```